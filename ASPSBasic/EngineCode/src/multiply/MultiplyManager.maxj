
package multiply;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.standard.Manager;
import com.maxeler.maxcompiler.v2.managers.standard.Manager.IOType;


class MultiplyManager{

	static final int nMax = 30*1024;

	private static final CPUTypes FLOAT_TYPE = CPUTypes.FLOAT;


	public static void main(String[] args) {
		Manager manager = new Manager(new EngineParameters(args));
		Kernel kernel = new MultiplyKernel(manager.makeKernelParameters(), nMax);
		manager.setKernel(kernel);
		manager.setIO(IOType.ALL_CPU);

		manager.createSLiCinterface(interfaceDefault());
		manager.build();
	}

	private static EngineInterface interfaceDefault() {
		EngineInterface ei = new EngineInterface();

		InterfaceParam n = ei.addParam("n", CPUTypes.INT);
		InterfaceParam loopLength = ei.getAutoLoopOffset("MatMatMultiplyKernel", "loopLength");
		ei.ignoreAutoLoopOffset("MatMatMultiplyKernel", "loopLength");

		ei.setTicks("MatMatMultiplyKernel", n*n*loopLength);
		ei.setScalar("MatMatMultiplyKernel", "n", n);
		ei.setStream("vectorInput", FLOAT_TYPE, FLOAT_TYPE.sizeInBytes() * n);
		ei.setStream("matrixInput", CPUTypes.FLOAT, FLOAT_TYPE.sizeInBytes() * n * n);
		ei.setStream("output", FLOAT_TYPE, FLOAT_TYPE.sizeInBytes() * n);
		return ei;
	}
}